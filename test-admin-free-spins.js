async function testAdminFreeSpinsUpdate() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ free_spins –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API...');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
    const slotsResponse = await fetch('http://localhost:3001/api/slots?admin=true');
    const slotsData = await slotsResponse.json();
    
    if (!slotsData.data || slotsData.data.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    const firstSlot = slotsData.data[0];
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ—Ç:', firstSlot.name, '(ID:', firstSlot.id + ')');

    const testData = {
      free_spins_title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤',
      free_spins_intro: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤',
      free_spins_instant_title: '–¢–µ—Å—Ç–æ–≤—ã–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã',
      free_spins_4_scatter: '–¢–µ—Å—Ç: 4 —Å–∫–∞—Ç—Ç–µ—Ä–∞ = 10 —Å–ø–∏–Ω–æ–≤',
      free_spins_5_scatter: '–¢–µ—Å—Ç: 5 —Å–∫–∞—Ç—Ç–µ—Ä–æ–≤ = 15 —Å–ø–∏–Ω–æ–≤',
      free_spins_6_scatter: '–¢–µ—Å—Ç: 6 —Å–∫–∞—Ç—Ç–µ—Ä–æ–≤ = 20 —Å–ø–∏–Ω–æ–≤',
      free_spins_features_title: '–¢–µ—Å—Ç–æ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
      free_spins_feature_1: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1',
      free_spins_feature_2: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2',
      free_spins_feature_3: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 3',
      free_spins_feature_4: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 4'
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API
    const updateResponse = await fetch(`http://localhost:3001/api/slots/${firstSlot.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API');
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', updateResponse.status);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ admin endpoint
    const getResponse = await fetch(`http://localhost:3001/api/slots/admin/${firstSlot.id}`);
    const getResult = await getResponse.json();
    const slot = getResult.data || getResult;

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('free_spins_title:', slot.free_spins_title);
    console.log('free_spins_intro:', slot.free_spins_intro);
    console.log('free_spins_feature_1:', slot.free_spins_feature_1);
    console.log('free_spins_feature_2:', slot.free_spins_feature_2);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const fieldsToCheck = Object.keys(testData);
    let allFieldsMatch = true;

    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π:');
    fieldsToCheck.forEach(field => {
      const matches = slot[field] === testData[field];
      console.log(`${field}: ${matches ? '‚úÖ' : '‚ùå'} (${matches ? '—Å–æ–≤–ø–∞–¥–∞–µ—Ç' : '–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'})`);
      if (!matches) {
        console.log(`  –û–∂–∏–¥–∞–ª–æ—Å—å: "${testData[field]}"`);
        console.log(`  –ü–æ–ª—É—á–µ–Ω–æ: "${slot[field]}"`);
        allFieldsMatch = false;
      }
    });

    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allFieldsMatch ? '‚úÖ –í–°–ï –ü–û–õ–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û' : '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–õ–Ø–ú–ò'}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

testAdminFreeSpinsUpdate();