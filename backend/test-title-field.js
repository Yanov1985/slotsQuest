/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è overview_features_title –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const { Pool } = require('pg');
require('dotenv').config();

async function testTitleField() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è overview_features_title...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const columnCheck = await pool.query(`
      SELECT column_name, data_type, character_maximum_length
      FROM information_schema.columns
      WHERE table_name = 'slots'
      AND column_name = 'overview_features_title';
    `);

    if (columnCheck.rows.length > 0) {
      console.log('‚úÖ –ü–æ–ª–µ overview_features_title —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log(columnCheck.rows[0]);
    } else {
      console.log('‚ùå –ü–æ–ª–µ overview_features_title –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const dataCheck = await pool.query(`
      SELECT id, name, overview_features_title
      FROM slots
      LIMIT 1;
    `);

    if (dataCheck.rows.length > 0) {
      console.log('\nüìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:');
      console.log('ID:', dataCheck.rows[0].id);
      console.log('Name:', dataCheck.rows[0].name);
      console.log('overview_features_title:', dataCheck.rows[0].overview_features_title || '(–ø—É—Å—Ç–æ)');
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

testTitleField();
