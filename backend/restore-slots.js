const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function restoreSlots() {
  try {
    console.log('üé∞ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ v002...');
    
    // –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å —Å–ª–æ—Ç–∞–º–∏
    const backupPath = path.join(__dirname, '..', 'backups', 'db', 'database_backup_v002.sql');
    
    if (!fs.existsSync(backupPath)) {
      throw new Error(`–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupPath}`);
    }
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupPath}`);
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync(backupPath, 'utf8');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã INSERT –¥–ª—è —Å–ª–æ—Ç–æ–≤
    const slotInserts = sqlContent
      .split('\n')
      .filter(line => line.trim().startsWith('INSERT INTO slots'))
      .map(line => line.trim().replace(/;$/, ''));
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${slotInserts.length} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—Å—Ç–∞–≤–∫–∏ —Å–ª–æ—Ç–æ–≤
    for (let i = 0; i < slotInserts.length; i++) {
      const insertCommand = slotInserts[i];
      
      try {
        await prisma.$executeRawUnsafe(insertCommand);
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ª–æ—Ç ${i + 1}/${slotInserts.length}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ ${i + 1}: ${error.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
      }
    }
    
    console.log('üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const slotsCount = await prisma.slots.count();
    console.log(`üìä –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ: ${slotsCount}`);
    
    if (slotsCount > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
      const sampleSlots = await prisma.slots.findMany({
        take: 3,
        select: {
          name: true,
          slug: true,
          rtp: true,
          volatility: true
        }
      });
      
      console.log('\nüé∞ –ü—Ä–∏–º–µ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:');
      sampleSlots.forEach((slot, index) => {
        console.log(`  ${index + 1}. ${slot.name} (${slot.slug}) - RTP: ${slot.rtp}%, –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${slot.volatility}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

restoreSlots();