const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkHeroKeywords() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Hero Keywords –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Prisma
    const slot = await prisma.slots.findFirst({
      select: {
        id: true,
        name: true,
        hero_keyword: true,
        hero_keyword_2: true,
        hero_keyword_3: true,
      }
    });

    if (slot) {
      console.log('‚úÖ –ü–æ–ª—è Hero Keywords —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      console.log('\n–ü—Ä–∏–º–µ—Ä —Å–ª–æ—Ç–∞:');
      console.log('- ID:', slot.id);
      console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', slot.name);
      console.log('- hero_keyword:', slot.hero_keyword || '(–ø—É—Å—Ç–æ)');
      console.log('- hero_keyword_2:', slot.hero_keyword_2 || '(–ø—É—Å—Ç–æ)');
      console.log('- hero_keyword_3:', slot.hero_keyword_3 || '(–ø—É—Å—Ç–æ)');
    } else {
      console.log('‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤');
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('Prisma Client –∑–Ω–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—è—Ö.');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);

    if (error.message.includes('hero_keyword_2') || error.message.includes('hero_keyword_3')) {
      console.log('\n‚ö†Ô∏è  Prisma Client –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω!');
      console.log('–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ HERO_KEYWORDS_INSTALLATION.md');
    }
  } finally {
    await prisma.$disconnect();
  }
}

checkHeroKeywords();


