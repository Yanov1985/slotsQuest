const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ SQL –≤ —Å—Ö–µ–º—É Prisma
const fieldMapping = {
  slots: {
    'is_featured': null, // –≠—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
    'theme': 'theme_id' // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π themes
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ INSERT –∑–∞–ø—Ä–æ—Å–æ–≤
function parseInsertStatement(sql) {
  const insertMatch = sql.match(/INSERT INTO\s+(\w+)\s*\(([^)]+)\)\s*VALUES\s*\((.+)\)/i);
  if (!insertMatch) return null;
  
  const tableName = insertMatch[1];
  const columns = insertMatch[2].split(',').map(col => col.trim().replace(/`/g, ''));
  const valuesStr = insertMatch[3];
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π
  const values = [];
  let current = '';
  let inQuotes = false;
  let quoteChar = null;
  let depth = 0;
  
  for (let i = 0; i < valuesStr.length; i++) {
    const char = valuesStr[i];
    
    if (char === '(' && !inQuotes) {
      depth++;
    } else if (char === ')' && !inQuotes) {
      depth--;
    } else if (!inQuotes && (char === "'" || char === '"')) {
      inQuotes = true;
      quoteChar = char;
      current += char;
    } else if (inQuotes && char === quoteChar) {
      if (i + 1 < valuesStr.length && valuesStr[i + 1] === quoteChar) {
        current += char + char;
        i++;
      } else {
        inQuotes = false;
        quoteChar = null;
        current += char;
      }
    } else if (!inQuotes && char === ',' && depth === 0) {
      values.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  
  if (current.trim()) {
    values.push(current.trim());
  }
  
  return { tableName, columns, values };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
function convertValue(value) {
  if (value === 'NULL' || value === 'null') return null;
  if (value.startsWith("'") && value.endsWith("'")) {
    return value.slice(1, -1).replace(/''/g, "'");
  }
  if (value.startsWith('"') && value.endsWith('"')) {
    return value.slice(1, -1).replace(/""/g, '"');
  }
  if (value === 'true' || value === 'TRUE') return true;
  if (value === 'false' || value === 'FALSE') return false;
  if (!isNaN(value) && !isNaN(parseFloat(value))) {
    return parseFloat(value);
  }
  return value;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ
function filterFields(tableName, data) {
  const filtered = { ...data };
  
  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
  if (tableName === 'slots') {
    delete filtered.is_featured; // –≠—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å theme –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
    if (filtered.theme && typeof filtered.theme === 'string') {
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–º, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ theme_id
      delete filtered.theme;
    }
  }
  
  return filtered;
}

async function importBackupSupabase(sqlFilePath) {
  try {
    console.log('üöÄ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —á–µ—Ä–µ–∑ Supabase...');
    console.log(`üìÅ –§–∞–π–ª: ${sqlFilePath}`);
    
    if (!fs.existsSync(sqlFilePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sqlFilePath}`);
    }
    
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(sqlFilePath).size / 1024).toFixed(2)} KB`);
    
    const sqlCommands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => 
        cmd.length > 0 && 
        !cmd.startsWith('--') && 
        !cmd.startsWith('SET foreign_key_checks') &&
        !cmd.startsWith('/*')
      );
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥`);
    
    let successCount = 0;
    let errorCount = 0;
    let insertCount = 0;
    let deleteCount = 0;
    const tableStats = {};
    
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i].trim();
      
      try {
        if (!command || command.length < 5) continue;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º DELETE –∫–æ–º–∞–Ω–¥—ã
        if (command.toUpperCase().startsWith('DELETE FROM')) {
          const tableMatch = command.match(/DELETE FROM\s+(\w+)/i);
          if (tableMatch) {
            const tableName = tableMatch[1];
            console.log(`üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∫–∏
            const { error } = await supabase
              .from(tableName)
              .delete()
              .gte('created_at', '1900-01-01'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            
            if (error && !error.message.includes('No rows found')) {
              console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ ${tableName}:`, error.message);
            } else {
              deleteCount++;
              console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –æ—á–∏—â–µ–Ω–∞`);
            }
          }
          successCount++;
          continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º INSERT –∫–æ–º–∞–Ω–¥—ã
        if (command.toUpperCase().startsWith('INSERT INTO')) {
          const parsed = parseInsertStatement(command);
          if (parsed) {
            const { tableName, columns, values } = parsed;
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            const insertData = {};
            for (let j = 0; j < columns.length && j < values.length; j++) {
              insertData[columns[j]] = convertValue(values[j]);
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ
            const filteredData = filterFields(tableName, insertData);
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const { error } = await supabase
              .from(tableName)
              .insert(filteredData);
            
            if (error) {
              console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ ${tableName}:`, error.message);
              errorCount++;
            } else {
              insertCount++;
              tableStats[tableName] = (tableStats[tableName] || 0) + 1;
              
              if (insertCount % 25 === 0) {
                console.log(`üìà –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${insertCount}`);
              }
            }
          }
          successCount++;
        }
        
      } catch (error) {
        errorCount++;
        console.warn(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}: ${error.message}`);
        
        if (errorCount > 50) {
          console.error('üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–∞');
          break;
        }
      }
    }
    
    console.log('\nüìä === –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ ===');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successCount} –∫–æ–º–∞–Ω–¥`);
    console.log(`üóëÔ∏è  –û–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è: ${deleteCount}`);
    console.log(`üìù –û–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏: ${insertCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    console.log('\nüìà === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º ===');
    Object.entries(tableStats).forEach(([table, count]) => {
      console.log(`${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try {
      const tables = ['providers', 'slot_categories', 'themes', 'slots'];
      console.log('\nüîç === –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===');
      
      for (const table of tables) {
        try {
          const { count } = await supabase
            .from(table)
            .select('*', { count: 'exact', head: true });
          
          const emoji = table === 'providers' ? 'üè¢' : 
                       table === 'slot_categories' ? 'üìÇ' : 
                       table === 'themes' ? 'üé®' : 'üé∞';
          
          console.log(`${emoji} ${table}: ${count || 0}`);
        } catch (tableError) {
          console.log(`‚ùì ${table}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É`);
        }
      }
      
    } catch (statsError) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', statsError.message);
    }
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
    if (insertCount > 0) {
      console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Prisma Studio –∏ —É–≤–∏–¥–µ—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log('   npx prisma studio');
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error.message);
    throw error;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const sqlFilePath = process.argv[2];

if (!sqlFilePath) {
  console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node import-backup-supabase.js <–ø—É—Ç—å_–∫_sql_—Ñ–∞–π–ª—É>');
  console.error('üìù –ü—Ä–∏–º–µ—Ä: node import-backup-supabase.js ../backups/db/database_backup_v002.sql');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importBackupSupabase(sqlFilePath).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});