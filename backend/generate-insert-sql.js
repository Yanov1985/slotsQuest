const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SQL –∑–Ω–∞—á–µ–Ω–∏–π
function escapeSqlValue(value) {
  if (value === null || value === undefined || value === 'null') {
    return 'NULL';
  }
  
  if (typeof value === 'string') {
    return `'${value.replace(/'/g, "''")}'`;
  }
  
  if (typeof value === 'boolean') {
    return value ? 'true' : 'false';
  }
  
  if (value instanceof Date) {
    return `'${value.toISOString()}'`;
  }
  
  return value;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ INSERT –∑–∞–ø—Ä–æ—Å–æ–≤
function generateInsertSQL(tableName, data) {
  if (!data || data.length === 0) {
    return `-- –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ${tableName}\n`;
  }
  
  let columns = Object.keys(data[0]);
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const excludedColumns = {
    'providers': ['is_recommended'], // –ö–æ–ª–æ–Ω–∫–∞ is_recommended –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ
  };
  
  if (excludedColumns[tableName]) {
    columns = columns.filter(col => !excludedColumns[tableName].includes(col));
  }
  
  let sql = `-- –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ${tableName}\n`;
  sql += `-- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${data.length}\n\n`;
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
  sql += `DELETE FROM "${tableName}";\n\n`;
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è INSERT –∑–∞–ø—Ä–æ—Å–æ–≤
  for (const row of data) {
    const values = columns.map(col => escapeSqlValue(row[col])).join(', ');
    sql += `INSERT INTO "${tableName}" ("${columns.join('", "')}") VALUES (${values});\n`;
  }
  
  sql += '\n';
  return sql;
}

function generateAllSQL() {
  try {
    console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    const dataDir = path.join(__dirname, 'extracted-data');
    const outputFile = path.join(dataDir, 'import-data.sql');
    
    let fullSQL = `-- SQL-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ SlotQuest\n`;
    fullSQL += `-- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n\n`;
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (PostgreSQL)
    fullSQL += `-- –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (PostgreSQL)\n`;
    fullSQL += `SET session_replication_role = replica;\n\n`;
    
    // –ü–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤–∞–∂–µ–Ω –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    const tables = [
      { name: 'providers', file: 'providers.json', emoji: 'üè¢' },
      { name: 'slot_categories', file: 'slot_categories.json', emoji: 'üìÇ' },
      { name: 'themes', file: 'themes.json', emoji: 'üé®' },
      { name: 'slots', file: 'slots.json', emoji: 'üé∞' }
    ];
    
    for (const table of tables) {
      const filePath = path.join(dataDir, table.file);
      
      if (fs.existsSync(filePath)) {
        console.log(`${table.emoji} –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${table.name}...`);
        
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        fullSQL += generateInsertSQL(table.name, data);
        
        console.log(`   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${data.length} INSERT –∫–æ–º–∞–Ω–¥`);
      } else {
        console.warn(`   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      }
    }
    
    // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (PostgreSQL)
    fullSQL += `-- –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (PostgreSQL)\n`;
    fullSQL += `SET session_replication_role = DEFAULT;\n\n`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL —Ñ–∞–π–ª
    fs.writeFileSync(outputFile, fullSQL, 'utf8');
    
    console.log(`\nüíæ SQL-—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(outputFile).size / 1024).toFixed(2)} KB`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    const instructionsFile = path.join(dataDir, 'SQL_IMPORT_INSTRUCTIONS.md');
    const instructions = `# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL

## –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ Prisma Studio
1. –û—Ç–∫—Ä–æ–π—Ç–µ Prisma Studio: \`npx prisma studio\`
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "Query" –∏–ª–∏ "SQL"
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ \`import-data.sql\`
4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL-–∫–æ–º–∞–Ω–¥—ã

## –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ psql (PostgreSQL)
\`\`\`bash
# –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
psql "postgresql://postgres.xxx:[password]@aws-0-eu-central-1.pooler.supabase.com:5432/postgres"

# –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL-—Ñ–∞–π–ª
\\i import-data.sql
\`\`\`

## –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ Supabase Dashboard
1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "SQL Editor"
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ \`import-data.sql\`
5. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω—ã—Ö:
- üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: 93 –∑–∞–ø–∏—Å–∏
- üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ—Ç–æ–≤: 31 –∑–∞–ø–∏—Å—å
- üé® –¢–µ–º—ã: 241 –∑–∞–ø–∏—Å—å
- üé∞ –°–ª–æ—Ç—ã: 5 –∑–∞–ø–∏—Å–µ–π

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
- SQL-–∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
`;
    
    fs.writeFileSync(instructionsFile, instructions, 'utf8');
    console.log(`üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${instructionsFile}`);
    
    console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª import-data.sql –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    console.log('2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ñ–∞–π–ª–µ SQL_IMPORT_INSTRUCTIONS.md');
    console.log('3. –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ SQL-–∫–æ–º–∞–Ω–¥—ã –≤ Prisma Studio');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateAllSQL();