#!/usr/bin/env node

/**
 * –ú–ê–°–¢–ï–†-–°–ö–†–ò–ü–¢ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SlotQuest
 *
 * –ê–≤—Ç–æ—Ä: –¢–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫ - –ª—É—á—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å IT —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π! üöÄ
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç - –∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π –∞—Ä–º–µ–π—Å–∫–∏–π –Ω–æ–∂ –¥–ª—è —Ç–≤–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!
 * –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø–æ—Å–ª–µ —Ö–∞–∫–µ—Ä—Å–∫–æ–π –∞—Ç–∞–∫–∏.
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—ë: –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ª–æ—Ç—ã) –¥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã) –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π!
 *
 * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. üßπ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Supabase (–∫–∞–∫ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞)
 * 2. üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL (–∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤)
 * 3. üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–µ–∫–∞–ø–∞ (–∫–∞–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä–æ–±–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ)
 * 4. üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç Prisma —Å—Ö–µ–º—É (–∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤)
 * 5. ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node master-restore-database.js
 */

const { createClient } = require('@supabase/supabase-js');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const util = require('util');

require('dotenv').config();

const execAsync = util.promisify(exec);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ - –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∏–∫—É–¥–∞!
 */
function checkEnvironmentVariables() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.error('üí° –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.error('   - SUPABASE_URL (URL —Ç–≤–æ–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞)');
    console.error('   - SUPABASE_SERVICE_ROLE_KEY (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)');
    console.error('');
    console.error('üîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:');
    console.error('1. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ backend/');
    console.error('2. –î–æ–±–∞–≤—å —Ç—É–¥–∞ —Å—Ç—Ä–æ–∫–∏:');
    console.error('   SUPABASE_URL=https://—Ç–≤–æ–π-–ø—Ä–æ–µ–∫—Ç.supabase.co');
    console.error('   SUPABASE_SERVICE_ROLE_KEY=—Ç–≤–æ–π-—Å–µ–∫—Ä–µ—Ç–Ω—ã–π-–∫–ª—é—á');
    console.error('3. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª–∏ Supabase ‚Üí Settings ‚Üí API');

    process.exit(1);
  }

  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
  console.log(`üìç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: ${supabaseUrl}`);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
 * –ö–∞–∫ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –æ—Ç —Å–∫–ª–∞–¥–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
 */
function createSupabaseClient() {
  console.log('üîë –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');

  try {
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Å–æ–∑–¥–∞–Ω–æ');
    return supabase;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ Supabase
 * –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Ä–æ–±–æ—Ç—É –Ω–∞ —Å–∫–ª–∞–¥–µ
 */
async function executeSql(supabase, sql, description) {
  try {
    console.log(`üîÑ ${description}...`);

    const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql });

    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${description}`);
      console.error('–î–µ—Ç–∞–ª–∏:', error);
      return false;
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${description}`);
    return true;

  } catch (err) {
    console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${description}`);
    console.error('–î–µ—Ç–∞–ª–∏:', err);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ exec_sql
 * –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
async function createExecSqlFunction(supabase) {
  const createFunctionSql = `
    CREATE OR REPLACE FUNCTION exec_sql(sql_query text)
    RETURNS text
    LANGUAGE plpgsql
    SECURITY DEFINER
    AS $$
    BEGIN
      EXECUTE sql_query;
      RETURN 'OK';
    EXCEPTION
      WHEN OTHERS THEN
        RETURN SQLERRM;
    END;
    $$;
  `;

  return await executeSql(supabase, createFunctionSql, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ SQL');
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL
 * –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é
 */
async function installExtensions(supabase) {
  console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');

  const extensions = [
    'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";', // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    'CREATE EXTENSION IF NOT EXISTS "pgcrypto";'   // –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  ];

  for (const ext of extensions) {
    await executeSql(supabase, ext, `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${ext}`);
  }
}

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ö–∞–∫ —Å–Ω–æ—Å —Å—Ç–∞—Ä–æ–≥–æ –∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –Ω–æ–≤–æ–≥–æ
 */
async function clearDatabase(supabase) {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—É—é —É–±–æ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  console.log('‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!');

  // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
  const dropQueries = [
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–∫–∞–∫ —Å–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ—Å–æ–º)
    'DROP TABLE IF EXISTS slot_mechanics CASCADE;',
    'DROP TABLE IF EXISTS slot_bonuses CASCADE;',
    'DROP TABLE IF EXISTS slot_features CASCADE;',

    // –ó–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    'DROP TABLE IF EXISTS slots CASCADE;',
    'DROP TABLE IF EXISTS mechanics CASCADE;',
    'DROP TABLE IF EXISTS bonuses CASCADE;',
    'DROP TABLE IF EXISTS features CASCADE;',
    'DROP TABLE IF EXISTS themes CASCADE;',
    'DROP TABLE IF EXISTS slot_categories CASCADE;',
    'DROP TABLE IF EXISTS providers CASCADE;',

    // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã Prisma
    'DROP TABLE IF EXISTS _prisma_migrations CASCADE;',

    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–æ–º–µ—Ä–æ–≤)
    'DROP SEQUENCE IF EXISTS features_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS bonuses_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS mechanics_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS slot_features_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS slot_bonuses_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS slot_mechanics_id_seq CASCADE;'
  ];

  for (const query of dropQueries) {
    await executeSql(supabase, query, `–°–Ω–æ—Å: ${query}`);
  }

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ - –≥–æ—Ç–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞!');
}

/**
 * –ß—Ç–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–µ–∫–∞–ø–∞
 * –ö–∞–∫ —á—Ç–µ–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–µ–π –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º
 */
function readAndPrepareBackup(backupPath) {
  console.log(`üìñ –ß–∏—Ç–∞–µ–º —á–µ—Ä—Ç–µ–∂–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${backupPath}`);

  try {
    const content = fs.readFileSync(backupPath, 'utf8');

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã (–∫–∞–∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏)
    const commands = content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('--')) // –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .join('\n')
      .split(';')
      .filter(cmd => cmd.trim());

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${commands.length} —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥`);
    return commands;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–µ–π:', error.message);
    throw error;
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞
 * –ö–∞–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–¥–∞–Ω–∏—è –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º
 */
async function restoreFromBackup(supabase, backupPath) {
  console.log('üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º...');

  const commands = readAndPrepareBackup(backupPath);
  let successCount = 0;
  let errorCount = 0;

  console.log('');
  console.log('üî® –ü—Ä–æ—Ü–µ—Å—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:');
  console.log('-'.repeat(50));

  for (let i = 0; i < commands.length; i++) {
    const command = commands[i].trim();
    if (!command) continue;

    const progress = `(${i + 1}/${commands.length})`;
    const percentage = Math.round((i + 1) / commands.length * 100);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    let operationType = 'üîß';
    if (command.includes('INSERT INTO providers')) operationType = 'üè™';
    if (command.includes('INSERT INTO slot_categories')) operationType = 'üìÅ';
    if (command.includes('INSERT INTO themes')) operationType = 'üé®';
    if (command.includes('INSERT INTO slots')) operationType = 'üé∞';
    if (command.includes('DELETE FROM')) operationType = 'üßπ';

    const success = await executeSql(
      supabase,
      command,
      `${operationType} –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø ${progress} [${percentage}%]`
    );

    if (success) {
      successCount++;
    } else {
      errorCount++;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const shortCommand = command.substring(0, 100) + (command.length > 100 ? '...' : '');
      console.warn(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —ç—Ç–∞–ø–µ ${progress}: ${shortCommand}`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10%
    if (percentage % 10 === 0) {
      console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    }
  }

  console.log('-'.repeat(50));
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: ${successCount}`);
  console.log(`   ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: ${errorCount}`);
  console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(successCount / (successCount + errorCount) * 100)}%`);

  if (errorCount > successCount / 2) {
    throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }

  console.log('üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª
 * –ö–∞–∫ –≤—ã–∑–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
async function runCommand(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    console.log(`üíª –ö–æ–º–∞–Ω–¥–∞: ${command}`);

    const { stdout, stderr } = await execAsync(command, {
      cwd: __dirname,
      env: { ...process.env }
    });

    if (stdout) {
      console.log('üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:', stdout.trim());
    }

    if (stderr && !stderr.includes('warn')) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr.trim());
    }

    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${description}`);
    return true;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${description}`);
    console.error('–î–µ—Ç–∞–ª–∏:', error.message);
    return false;
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Prisma
 * –ö–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞–≤–∫–∏
 */
async function syncPrisma() {
  console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ Prisma –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Prisma
  const generateSuccess = await runCommand(
    'npx prisma generate',
    '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ Prisma'
  );

  if (!generateSuccess) {
    console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
  }

  // –ü—Ä–æ—Ç–∞–ª–∫–∏–≤–∞–µ–º —Å—Ö–µ–º—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const pushSuccess = await runCommand(
    'npx prisma db push',
    '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
  );

  if (!pushSuccess) {
    console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ö–µ–º—ã, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
  }

  console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Prisma –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 * –ö–∞–∫ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 */
async function verifyRestoration() {
  try {
    console.log('üîç –ü—Ä–æ–≤–æ–¥–∏–º —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ Prisma –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    await prisma.$connect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const providersCount = await prisma.providers.count();
    const categoriesCount = await prisma.slot_categories.count();
    const themesCount = await prisma.themes.count();

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤–∞:');
    console.log(`   üè™ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤): ${providersCount}`);
    console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesCount}`);
    console.log(`   üé® –¢–µ–º: ${themesCount}`);

    await prisma.$disconnect();

    if (providersCount > 0 && categoriesCount > 0 && themesCount > 0) {
      console.log('‚úÖ –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã!');
      return true;
    } else {
      console.warn('‚ö†Ô∏è –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã');
      return false;
    }

  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error.message);
    return false;
  }
}

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –¥–∏—Ä–∏–∂–µ—Ä –≤—Å–µ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞!
 */
async function main() {
  const startTime = Date.now();

  try {
    console.log('üé¨ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• SLOTQUEST!');
    console.log('=' * 80);
    console.log('üéØ –¶–µ–ª—å: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ–ø–ª–∞ –∫–∞–∫ –§–µ–Ω–∏–∫—Å!');
    console.log('üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleString('ru-RU'));
    console.log('=' * 80);
    console.log('');

    // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üìã –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ');
    console.log('-' * 40);
    checkEnvironmentVariables();
    const supabase = createSupabaseClient();
    console.log('');

    // –≠—Ç–∞–ø 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    console.log('üìã –≠–¢–ê–ü 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
    console.log('-' * 40);
    await createExecSqlFunction(supabase);
    await installExtensions(supabase);
    console.log('');

    // –≠—Ç–∞–ø 3: –°–Ω–æ—Å —Å—Ç–∞—Ä–æ–≥–æ
    console.log('üìã –≠–¢–ê–ü 3: –°–Ω–æ—Å —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
    console.log('-' * 40);
    await clearDatabase(supabase);
    console.log('');

    // –≠—Ç–∞–ø 4: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ
    console.log('üìã –≠–¢–ê–ü 4: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º');
    console.log('-' * 40);
    const backupPath = path.join(__dirname, '../backups/db/database_backup_v002.sql');

    if (!fs.existsSync(backupPath)) {
      throw new Error(`–ß–µ—Ä—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: ${backupPath}`);
    }

    await restoreFromBackup(supabase, backupPath);
    console.log('');

    // –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    console.log('üìã –≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞');
    console.log('-' * 40);
    await syncPrisma();
    console.log('');

    // –≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üìã –≠–¢–ê–ü 6: –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞');
    console.log('-' * 40);
    const verificationPassed = await verifyRestoration();
    console.log('');

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);

    console.log('=' * 80);
    console.log('üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('=' * 80);
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
    console.log(`   üè™ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
    console.log(`   üîÑ Prisma: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    console.log(`   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${verificationPassed ? '–ü—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ' : '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`);
    console.log('');
    console.log('üöÄ –ß–¢–û –î–ê–õ–¨–®–ï:');
    console.log('1. –ó–∞–ø—É—Å–∫ backend: npm run start:dev');
    console.log('2. –ó–∞–ø—É—Å–∫ frontend: cd ../frontend && npm run dev');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: npm run db:studio');
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API: http://localhost:3000');
    console.log('');
    console.log('üí° –°–û–í–ï–¢: –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –±–µ–∫–∞–ø –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞!');
    console.log('=' * 80);

    if (!verificationPassed) {
      console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.');
      console.warn('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.');
    }

  } catch (error) {
    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);

    console.error('=' * 80);
    console.error('üí• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ò–ó-–ó–∞ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò!');
    console.error('=' * 80);
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${duration} —Å–µ–∫—É–Ω–¥`);
    console.error('');
    console.error('üîß –ü–õ–ê–ù –°–ü–ê–°–ï–ù–ò–Ø:');
    console.error('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    console.error('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω');
    console.error('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ');
    console.error('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.error('5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã –≤—Ä—É—á–Ω—É—é');
    console.error('');
    console.error('üìû –¢–ï–•–ü–û–î–î–ï–†–ñ–ö–ê: –ü–æ–∫–∞–∂–∏ —ç—Ç–∏ –ª–æ–≥–∏ —Å–≤–æ–µ–º—É –º–µ–Ω—Ç–æ—Ä—É –∏–ª–∏ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
    console.error('=' * 80);

    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if (require.main === module) {
  main();
}

module.exports = { main };

