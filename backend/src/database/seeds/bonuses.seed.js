const { Bonus } = require('../../models');

const bonusesData = [
  {
    name: 'Free Spins',
    slug: 'free-spins',
    description: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫',
    icon: 'üé∞',
    color: '#10B981',
    type: 'feature',
    is_active: true,
    is_popular: true,
    is_featured: true,
    popularity_score: 95,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Wild Symbol',
    slug: 'wild-symbol',
    description: '–°–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π',
    icon: 'üÉè',
    color: '#8B5CF6',
    type: 'symbol',
    is_active: true,
    is_popular: true,
    is_featured: false,
    popularity_score: 90,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Bonus Game',
    slug: 'bonus-game',
    description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–Ω–∏-–∏–≥—Ä–∞ —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø—Ä–∏–∑–∞–º–∏',
    icon: 'üéÆ',
    color: '#F59E0B',
    type: 'feature',
    is_active: true,
    is_popular: true,
    is_featured: true,
    popularity_score: 85,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Multiplier',
    slug: 'multiplier',
    description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑',
    icon: '‚úñÔ∏è',
    color: '#EF4444',
    type: 'modifier',
    is_active: true,
    is_popular: true,
    is_featured: false,
    popularity_score: 80,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Scatter Symbol',
    slug: 'scatter-symbol',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏',
    icon: 'üíé',
    color: '#06B6D4',
    type: 'symbol',
    is_active: true,
    is_popular: true,
    is_featured: false,
    popularity_score: 75,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  }
];

module.exports = {
  up: async (queryInterface, Sequelize) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
      const existingBonuses = await queryInterface.sequelize.query(
        'SELECT COUNT(*) as count FROM bonuses',
        { type: Sequelize.QueryTypes.SELECT }
      );

      if (existingBonuses[0].count > 0) {
        console.log('–ë–æ–Ω—É—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º seed');
        return;
      }

      await queryInterface.bulkInsert('bonuses', bonusesData);
      console.log('Seed –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–Ω—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ seed –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–Ω—É—Å–æ–≤:', error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    try {
      await queryInterface.bulkDelete('bonuses', null, {});
      console.log('Seed –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–Ω—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ seed –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–Ω—É—Å–æ–≤:', error);
      throw error;
    }
  }
};