const { Mechanic } = require('../../models');

const mechanicsData = [
  {
    name: 'Cascading Reels',
    slug: 'cascading-reels',
    description: '–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏—Å—á–µ–∑–∞—é—Ç, –∞ –Ω–æ–≤—ã–µ –ø–∞–¥–∞—é—Ç —Å–≤–µ—Ä—Ö—É, —Å–æ–∑–¥–∞–≤–∞—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π',
    icon: 'üåä',
    color: '#3B82F6',
    type: 'reel_mechanic',
    is_active: true,
    is_popular: true,
    is_featured: true,
    popularity_score: 88,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Scatter Pays',
    slug: 'scatter-pays',
    description: '–í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∑–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ',
    icon: 'üí´',
    color: '#8B5CF6',
    type: 'payout_mechanic',
    is_active: true,
    is_popular: true,
    is_featured: true,
    popularity_score: 85,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Random Multiplier',
    slug: 'random-multiplier',
    description: '–°–ª—É—á–∞–π–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã',
    icon: 'üé≤',
    color: '#F59E0B',
    type: 'modifier',
    is_active: true,
    is_popular: true,
    is_featured: false,
    popularity_score: 82,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Megaways',
    slug: 'megaways',
    description: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º –±–∞—Ä–∞–±–∞–Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Ç—ã—Å—è—á–∏ —Å–ø–æ—Å–æ–±–æ–≤ –≤—ã–∏–≥—Ä–∞—Ç—å',
    icon: 'üî•',
    color: '#EF4444',
    type: 'reel_mechanic',
    is_active: true,
    is_popular: true,
    is_featured: true,
    popularity_score: 92,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Hold & Win',
    slug: 'hold-win',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤',
    icon: 'üîí',
    color: '#10B981',
    type: 'feature_mechanic',
    is_active: true,
    is_popular: true,
    is_featured: false,
    popularity_score: 78,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  },
  {
    name: 'Expanding Wilds',
    slug: 'expanding-wilds',
    description: 'Wild —Å–∏–º–≤–æ–ª—ã —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è –Ω–∞ –≤–µ—Å—å –±–∞—Ä–∞–±–∞–Ω –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏',
    icon: 'üìè',
    color: '#06B6D4',
    type: 'symbol_mechanic',
    is_active: true,
    is_popular: true,
    is_featured: false,
    popularity_score: 75,
    usage_count: 0,
    created_at: new Date(),
    updated_at: new Date()
  }
];

module.exports = {
  up: async (queryInterface, Sequelize) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
      const existingMechanics = await queryInterface.sequelize.query(
        'SELECT COUNT(*) as count FROM mechanics',
        { type: Sequelize.QueryTypes.SELECT }
      );

      if (existingMechanics[0].count > 0) {
        console.log('–ú–µ—Ö–∞–Ω–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º seed');
        return;
      }

      await queryInterface.bulkInsert('mechanics', mechanicsData);
      console.log('Seed –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ seed –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫:', error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    try {
      await queryInterface.bulkDelete('mechanics', null, {});
      console.log('Seed –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ seed –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫:', error);
      throw error;
    }
  }
};