const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

const testFeatures = [
  {
    name: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã',
    slug: 'free-spins',
    description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤',
    type: 'bonus',
    icon: 'üé∞',
    color: '#ff6b6b',
    is_popular: true,
    is_featured: true,
    sort_order: 1
  },
  {
    name: '–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã—à–∞',
    slug: 'win-multipliers',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ —Ä–∞–∑–º–µ—Ä –≤—ã–∏–≥—Ä—ã—à–∞',
    type: 'mechanic',
    icon: '‚úñÔ∏è',
    color: '#4ecdc4',
    is_popular: true,
    sort_order: 2
  },
  {
    name: '–î–∏–∫–∏–µ —Å–∏–º–≤–æ–ª—ã',
    slug: 'wild-symbols',
    description: '–°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã',
    type: 'symbol',
    icon: 'üÉè',
    color: '#45b7d1',
    is_popular: true,
    is_featured: true,
    sort_order: 3
  },
  {
    name: '–°–∫–∞—Ç—Ç–µ—Ä —Å–∏–º–≤–æ–ª—ã',
    slug: 'scatter-symbols',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞–ø—É—Å–∫–∞—é—â–∏–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
    type: 'symbol',
    icon: 'üíé',
    color: '#f9ca24',
    is_popular: true,
    sort_order: 4
  },
  {
    name: '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç',
    slug: 'progressive-jackpot',
    description: '–î–∂–µ–∫–ø–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–æ–π –∏–≥—Ä–æ–∫–æ–≤',
    type: 'jackpot',
    icon: 'üí∞',
    color: '#f0932b',
    is_featured: true,
    sort_order: 5
  },
  {
    name: '–ö–∞—Å–∫–∞–¥–Ω—ã–µ –±–∞—Ä–∞–±–∞–Ω—ã',
    slug: 'cascading-reels',
    description: '–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏—Å—á–µ–∑–∞—é—Ç, –æ—Å–≤–æ–±–æ–∂–¥–∞—è –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö',
    type: 'mechanic',
    icon: '‚¨áÔ∏è',
    color: '#eb4d4b',
    sort_order: 6
  },
  {
    name: '–†–∞—Å—à–∏—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã',
    slug: 'expanding-symbols',
    description: '–°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –Ω–∞ –≤–µ—Å—å –±–∞—Ä–∞–±–∞–Ω',
    type: 'symbol',
    icon: 'üìè',
    color: '#6c5ce7',
    sort_order: 7
  },
  {
    name: '–ú–µ–≥–∞–≤–µ–π—Å',
    slug: 'megaways',
    description: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ø–æ—Å–æ–±–æ–≤ –≤—ã–∏–≥—Ä–∞—Ç—å',
    type: 'mechanic',
    icon: 'üîÄ',
    color: '#a29bfe',
    is_popular: true,
    sort_order: 8
  },
  {
    name: '–ë–æ–Ω—É—Å–Ω–∞—è –∏–≥—Ä–∞',
    slug: 'bonus-game',
    description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ä–∞—É–Ω–¥ —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏',
    type: 'bonus',
    icon: 'üéÆ',
    color: '#fd79a8',
    is_popular: true,
    sort_order: 9
  },
  {
    name: '–ü–æ–∫—É–ø–∫–∞ –±–æ–Ω—É—Å–∞',
    slug: 'bonus-buy',
    description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–Ω—É—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
    type: 'feature',
    icon: 'üí≥',
    color: '#00b894',
    sort_order: 10
  }
];

async function seedFeatures() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã features —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    const { data: existingFeatures, error: checkError } = await supabase
      .from('features')
      .select('id, name');

    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö features:', checkError);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö features: ${existingFeatures?.length || 0}`);

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (existingFeatures && existingFeatures.length > 0) {
      console.log('‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ features —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ:');
      existingFeatures.forEach(feature => {
        console.log(`  - ${feature.name} (ID: ${feature.id})`);
      });
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const { data, error } = await supabase
      .from('features')
      .insert(testFeatures)
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ features:', error);
      return;
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ features:', data?.length || 0);
    console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    if (data && data.length > 0) {
      console.log('\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:');
      data.forEach((feature, index) => {
        console.log(`  ${index + 1}. ${feature.name} (${feature.icon}) - ${feature.description}`);
      });
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
seedFeatures().then(() => {
  console.log('\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.');
  process.exit(0);
}).catch(error => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
