const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function parseInsertStatement(sql) {
  const insertMatch = sql.match(/INSERT INTO\s+(\w+)\s*\(([^)]+)\)\s*VALUES\s*\((.+)\)/i);
  if (!insertMatch) return null;
  
  const tableName = insertMatch[1];
  const columns = insertMatch[2].split(',').map(col => col.trim().replace(/`/g, ''));
  const valuesStr = insertMatch[3];
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π
  const values = [];
  let current = '';
  let inQuotes = false;
  let quoteChar = null;
  let depth = 0;
  
  for (let i = 0; i < valuesStr.length; i++) {
    const char = valuesStr[i];
    
    if (char === '(' && !inQuotes) {
      depth++;
    } else if (char === ')' && !inQuotes) {
      depth--;
    } else if (!inQuotes && (char === "'" || char === '"')) {
      inQuotes = true;
      quoteChar = char;
      current += char;
    } else if (inQuotes && char === quoteChar) {
      if (i + 1 < valuesStr.length && valuesStr[i + 1] === quoteChar) {
        current += char + char;
        i++;
      } else {
        inQuotes = false;
        quoteChar = null;
        current += char;
      }
    } else if (!inQuotes && char === ',' && depth === 0) {
      values.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  
  if (current.trim()) {
    values.push(current.trim());
  }
  
  return { tableName, columns, values };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
function convertValue(value) {
  if (value === 'NULL' || value === 'null') return null;
  if (value.startsWith("'") && value.endsWith("'")) {
    return value.slice(1, -1).replace(/''/g, "'");
  }
  if (value.startsWith('"') && value.endsWith('"')) {
    return value.slice(1, -1).replace(/""/g, '"');
  }
  if (value === 'true' || value === 'TRUE') return true;
  if (value === 'false' || value === 'FALSE') return false;
  if (!isNaN(value) && !isNaN(parseFloat(value))) {
    return parseFloat(value);
  }
  return value;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ Prisma
function filterFields(tableName, data) {
  const filtered = { ...data };
  
  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
  if (tableName === 'slots') {
    delete filtered.is_featured; // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
    delete filtered.popularity_score; // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
    delete filtered.theme; // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ theme_id
  }
  
  return filtered;
}

function extractDataFromSQL(sqlFilePath) {
  try {
    console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL —Ñ–∞–π–ª–∞...');
    console.log(`üìÅ –§–∞–π–ª: ${sqlFilePath}`);
    
    if (!fs.existsSync(sqlFilePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sqlFilePath}`);
    }
    
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(sqlFilePath).size / 1024).toFixed(2)} KB`);
    
    const sqlCommands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => 
        cmd.length > 0 && 
        !cmd.startsWith('--') && 
        !cmd.startsWith('SET foreign_key_checks') &&
        !cmd.startsWith('/*') &&
        cmd.toUpperCase().startsWith('INSERT INTO')
      );
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} INSERT –∫–æ–º–∞–Ω–¥`);
    
    const extractedData = {
      providers: [],
      slot_categories: [],
      themes: [],
      slots: []
    };
    
    let processedCount = 0;
    
    for (const command of sqlCommands) {
      const parsed = parseInsertStatement(command);
      if (parsed) {
        const { tableName, columns, values } = parsed;
        
        if (extractedData.hasOwnProperty(tableName)) {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
          const rowData = {};
          for (let j = 0; j < columns.length && j < values.length; j++) {
            rowData[columns[j]] = convertValue(values[j]);
          }
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ
          const filteredData = filterFields(tableName, rowData);
          
          extractedData[tableName].push(filteredData);
          processedCount++;
          
          if (processedCount % 50 === 0) {
            console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} –∑–∞–ø–∏—Å–µ–π`);
          }
        }
      }
    }
    
    console.log('\nüìä === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===');
    Object.entries(extractedData).forEach(([table, data]) => {
      const emoji = table === 'providers' ? 'üè¢' : 
                   table === 'slot_categories' ? 'üìÇ' : 
                   table === 'themes' ? 'üé®' : 'üé∞';
      console.log(`${emoji} ${table}: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const outputDir = path.join(__dirname, 'extracted-data');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir);
    }
    
    Object.entries(extractedData).forEach(([table, data]) => {
      if (data.length > 0) {
        const filePath = path.join(outputDir, `${table}.json`);
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filePath}`);
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Prisma Studio
    const instructionsPath = path.join(outputDir, 'PRISMA_STUDIO_INSTRUCTIONS.md');
    const instructions = `# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö –≤ Prisma Studio

## –®–∞–≥ 1: –ó–∞–ø—É—Å—Ç–∏—Ç–µ Prisma Studio
\`\`\`bash
npx prisma studio
\`\`\`

## –®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

### 1. –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã (providers)
- –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É \`providers\`
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ \`providers.json\`
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${extractedData.providers.length}

### 2. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ—Ç–æ–≤ (slot_categories)
- –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É \`slot_categories\`
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ \`slot_categories.json\`
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${extractedData.slot_categories.length}

### 3. –¢–µ–º—ã (themes)
- –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É \`themes\`
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ \`themes.json\`
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${extractedData.themes.length}

### 4. –°–ª–æ—Ç—ã (slots)
- –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É \`slots\`
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ \`slots.json\`
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${extractedData.slots.length}

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
- –í Prisma Studio –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é "Add record" –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
- –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞

## –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:
–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ JSON —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Prisma Client.
`;
    
    fs.writeFileSync(instructionsPath, instructions, 'utf8');
    console.log(`üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${instructionsPath}`);
    
    console.log('\nüéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx prisma studio');
    console.log('2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ñ–∞–π–ª–µ PRISMA_STUDIO_INSTRUCTIONS.md');
    console.log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞');
    
    return extractedData;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const sqlFilePath = process.argv[2];

if (!sqlFilePath) {
  console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node extract-data-for-prisma.js <–ø—É—Ç—å_–∫_sql_—Ñ–∞–π–ª—É>');
  console.error('üìù –ü—Ä–∏–º–µ—Ä: node extract-data-for-prisma.js ../backups/db/database_backup_v002.sql');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
try {
  extractDataFromSQL(sqlFilePath);
} catch (error) {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}