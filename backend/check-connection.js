#!/usr/bin/env node

/**
 * üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É
 */

require('dotenv').config();

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE');
console.log('=' * 50);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('');

const requiredVars = [
  'SUPABASE_URL',
  'SUPABASE_SERVICE_ROLE_KEY',
  'DATABASE_URL',
  'DIRECT_URL'
];

let hasAllVars = true;

for (const varName of requiredVars) {
  const value = process.env[varName];
  if (value) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const masked = value.length > 20
      ? value.substring(0, 10) + '...' + value.substring(value.length - 10)
      : value.substring(0, 5) + '...';
    console.log(`‚úÖ ${varName}: ${masked}`);
  } else {
    console.log(`‚ùå ${varName}: –ù–ï –ù–ê–ô–î–ï–ù–ê`);
    hasAllVars = false;
  }
}

console.log('');

if (!hasAllVars) {
  console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
  console.log('');
  console.log('üîß –ß–¢–û –î–ï–õ–ê–¢–¨:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ñ–∞–π–ª .env –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ backend/');
  console.log('2. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ .env –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
  console.log('3. –ü–æ–ª—É—á–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase Dashboard:');
  console.log('   - Settings ‚Üí API ‚Üí URL –∏ service_role key');
  console.log('   - Settings ‚Üí Database ‚Üí Connection string');
  console.log('');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL:');
const supabaseUrl = process.env.SUPABASE_URL;
const dbUrl = process.env.DATABASE_URL;

if (supabaseUrl && supabaseUrl.includes('supabase.co')) {
  console.log('‚úÖ SUPABASE_URL –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
} else {
  console.log('‚ùå SUPABASE_URL –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
  console.log('   –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: https://—Ç–≤–æ–π-–ø—Ä–æ–µ–∫—Ç.supabase.co');
}

if (dbUrl && dbUrl.includes('postgresql://') && dbUrl.includes('supabase.co')) {
  console.log('‚úÖ DATABASE_URL –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
} else {
  console.log('‚ùå DATABASE_URL –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
  console.log('   –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://postgres:–ø–∞—Ä–æ–ª—å@db.–ø—Ä–æ–µ–∫—Ç.supabase.co:5432/postgres');
}

console.log('');

// –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase
console.log('üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase API:');

async function testSupabaseConnection() {
  try {
    const { createClient } = require('@supabase/supabase-js');

    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data, error } = await supabase.from('_prisma_migrations').select('*').limit(1);

    if (error) {
      console.log(`‚ö†Ô∏è Supabase API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞: ${error.message}`);
      if (error.message.includes('relation') && error.message.includes('does not exist')) {
        console.log('üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Ç–∞–±–ª–∏—Ü—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
        return true;
      }
      return false;
    } else {
      console.log('‚úÖ Supabase API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ');
      return true;
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase API: ${error.message}`);
    return false;
  }
}

// –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Prisma
console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ Prisma:');

async function testPrismaConnection() {
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    await prisma.$connect();
    console.log('‚úÖ Prisma –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Prisma –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã');

    await prisma.$disconnect();
    return true;

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Prisma: ${error.message}`);

    if (error.message.includes("Can't reach database server")) {
      console.log('');
      console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      console.log('');
      console.log('üîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
      console.log('1. üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
      console.log('2. üîí Supabase –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω');
      console.log('3. üîë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ DATABASE_URL');
      console.log('4. üìç –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('');
      console.log('üõ†Ô∏è –ß–¢–û –ü–û–ü–†–û–ë–û–í–ê–¢–¨:');
      console.log('1. –ó–∞–π–¥–∏ –≤ Supabase Dashboard –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å Supabase: https://status.supabase.com');
      console.log('3. –°–∫–æ–ø–∏—Ä—É–π –∑–∞–Ω–æ–≤–æ CONNECTION STRING –∏–∑ Settings ‚Üí Database');
      console.log('4. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª—å –≤ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)');
    }

    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async function runDiagnostics() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...');
  console.log('');

  const supabaseOk = await testSupabaseConnection();
  const prismaOk = await testPrismaConnection();

  console.log('');
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log(`   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${hasAllVars ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Supabase API: ${supabaseOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Prisma –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${prismaOk ? '‚úÖ' : '‚ùå'}`);

  if (hasAllVars && supabaseOk && prismaOk) {
    console.log('');
    console.log('üéâ –í–°–ï –û–¢–õ–ò–ß–ù–û! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
    console.log('');
    console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: node restore-via-prisma.js');
  } else {
    console.log('');
    console.log('üö® –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤—å –∏—Ö –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
    console.log('');
    console.log('üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –°–∫–∏–Ω—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —á–∞—Ç!');
  }
}

runDiagnostics().catch(error => {
  console.error('üí• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  process.exit(1);
});
