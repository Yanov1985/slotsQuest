const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function linkSlotMechanics() {
  try {
    console.log('üîó –°–≤—è–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç —Å –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏...');

    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç "Book of Ra Deluxe"
    const slot = await prisma.slots.findFirst({
      where: {
        slug: 'book-of-ra-deluxe'
      }
    });

    if (!slot) {
      console.log('‚ùå –°–ª–æ—Ç "Book of Ra Deluxe" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üìç –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç: ${slot.name} (ID: ${slot.id})`);

    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
    const mechanics = await prisma.mechanics.findMany({
      where: {
        slug: {
          in: ['wild-symbols', 'scatter-pays', 'free-spins', 'multipliers']
        }
      }
    });

    console.log(`üîß –ù–∞–π–¥–µ–Ω–æ –º–µ—Ö–∞–Ω–∏–∫: ${mechanics.length}`);

    // –°–≤—è–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç —Å –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏
    for (const mechanic of mechanics) {
      const existing = await prisma.slot_mechanics.findFirst({
        where: {
          slot_id: slot.id,
          mechanic_id: mechanic.id
        }
      });

      if (!existing) {
        await prisma.slot_mechanics.create({
          data: {
            slot_id: slot.id,
            mechanic_id: mechanic.id
          }
        });
        console.log(`‚úÖ –°–≤—è–∑–∞–Ω —Å–ª–æ—Ç —Å –º–µ—Ö–∞–Ω–∏–∫–æ–π: ${mechanic.name}`);
      } else {
        console.log(`‚ö†Ô∏è –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${mechanic.name}`);
      }
    }

    console.log('üéâ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const slotMechanics = await prisma.slot_mechanics.findMany({
      where: { slot_id: slot.id },
      include: {
        mechanics: true
      }
    });

    console.log(`üìä –°–ª–æ—Ç —Å–≤—è–∑–∞–Ω —Å ${slotMechanics.length} –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏:`);
    slotMechanics.forEach(sm => {
      console.log(`  - ${sm.mechanics.name}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

linkSlotMechanics();