const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function restoreSlots() {
  try {
    console.log('üé∞ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ v002...');
    
    // –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å —Å–ª–æ—Ç–∞–º–∏
    const backupPath = path.join(__dirname, '..', 'backups', 'db', 'database_backup_v002.sql');
    
    if (!fs.existsSync(backupPath)) {
      throw new Error(`–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupPath}`);
    }
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupPath}`);
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync(backupPath, 'utf8');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã INSERT –¥–ª—è —Å–ª–æ—Ç–æ–≤
    const slotInserts = sqlContent
      .split('\n')
      .filter(line => line.trim().startsWith('INSERT INTO slots'))
      .map(line => line.trim().replace(/;$/, ''));
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${slotInserts.length} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ª–æ—Ç–æ–≤
    await prisma.slots.deleteMany({});
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∏–ª —Ç–∞–±–ª–∏—Ü—É —Å–ª–æ—Ç–æ–≤');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É, –∏—Å–∫–ª—é—á–∞—è –ø–æ–ª–µ is_featured
    for (let i = 0; i < slotInserts.length; i++) {
      const insertCommand = slotInserts[i];
      
      try {
        // –ü–∞—Ä—Å–∏–º INSERT –∫–æ–º–∞–Ω–¥—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const match = insertCommand.match(/INSERT INTO slots \(([^)]+)\) VALUES \(([^)]+)\)/);
        if (!match) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: ${insertCommand}`);
          continue;
        }
        
        const columns = match[1].split(',').map(col => col.trim());
        const values = match[2].split(',').map(val => val.trim());
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è is_featured
        const slotData = {};
        for (let j = 0; j < columns.length; j++) {
          const column = columns[j];
          const value = values[j];
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ is_featured
          if (column === 'is_featured') {
            continue;
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
          if (value === 'NULL' || value === 'null') {
            slotData[column] = null;
          } else if (value.startsWith("'") && value.endsWith("'")) {
            slotData[column] = value.slice(1, -1);
          } else if (!isNaN(value) && value !== '') {
            slotData[column] = parseFloat(value);
          } else if (value === 'true') {
            slotData[column] = true;
          } else if (value === 'false') {
            slotData[column] = false;
          } else {
            slotData[column] = value;
          }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç —á–µ—Ä–µ–∑ Prisma
        await prisma.slots.create({
          data: {
            id: slotData.id,
            name: slotData.name,
            slug: slotData.slug,
            provider_id: slotData.provider_id,
            category_id: slotData.category_id === 'null' ? null : slotData.category_id,
            theme_id: slotData.theme_id,
            description: slotData.description,
            image_url: slotData.image_url,
            rtp: slotData.rtp ? parseFloat(slotData.rtp) : null,
            volatility: slotData.volatility,
            min_bet: slotData.min_bet ? parseFloat(slotData.min_bet) : null,
            max_bet: slotData.max_bet ? parseFloat(slotData.max_bet) : null,
            max_win: slotData.max_win ? parseFloat(slotData.max_win) : null,
            reels: slotData.reels ? parseInt(slotData.reels) : null,
            rows: slotData.rows ? parseInt(slotData.rows) : null,
            release_date: slotData.release_date ? new Date(slotData.release_date) : null,
            is_active: slotData.is_active !== false,
            play_count: slotData.play_count ? parseInt(slotData.play_count) : 0,
            created_at: slotData.created_at ? new Date(slotData.created_at) : new Date(),
            updated_at: slotData.updated_at ? new Date(slotData.updated_at) : new Date()
          }
        });
        
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ª–æ—Ç ${i + 1}/${slotInserts.length}: ${slotData.name}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ ${i + 1}: ${error.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
      }
    }
    
    console.log('üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const slotsCount = await prisma.slots.count();
    console.log(`üìä –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ: ${slotsCount}`);
    
    if (slotsCount > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
      const sampleSlots = await prisma.slots.findMany({
        take: 5,
        select: {
          name: true,
          slug: true,
          rtp: true,
          volatility: true,
          providers: {
            select: {
              name: true
            }
          }
        }
      });
      
      console.log('\nüé∞ –ü—Ä–∏–º–µ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:');
      sampleSlots.forEach((slot, index) => {
        console.log(`  ${index + 1}. ${slot.name} (${slot.slug})`);
        console.log(`     –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${slot.providers?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`     RTP: ${slot.rtp}%, –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${slot.volatility}`);
        console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

restoreSlots();