#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Prisma —Å—Ö–µ–º—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
 * 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Prisma –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã
 * 2. –ü—Ä–æ—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * 3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ö–µ–º—ã –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node sync-prisma-after-restore.js
 */

const { exec } = require('child_process');
const path = require('path');
const util = require('util');

const execAsync = util.promisify(exec);

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
async function runCommand(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    console.log(`üìù –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);

    const { stdout, stderr } = await execAsync(command, {
      cwd: __dirname,
      env: { ...process.env }
    });

    if (stdout) {
      console.log('üì§ –í—ã–≤–æ–¥:', stdout);
    }

    if (stderr && !stderr.includes('warn')) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${description}`);
    return true;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`);
    console.error('–î–µ—Ç–∞–ª–∏:', error.message);

    if (error.stdout) {
      console.log('üì§ –í—ã–≤–æ–¥:', error.stdout);
    }

    if (error.stderr) {
      console.error('üì• –û—à–∏–±–∫–∏:', error.stderr);
    }

    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabaseConnection() {
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Prisma –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    await prisma.$connect();
    await prisma.$queryRaw`SELECT 1 as test`;

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');

    await prisma.$disconnect();
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Prisma
 */
async function main() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Prisma –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î');
    console.log('=' * 60);

    // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Prisma
    const generateSuccess = await runCommand(
      'npx prisma generate',
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma'
    );

    if (!generateSuccess) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Prisma');
    }

    // –®–∞–≥ 2: –ü—Ä–æ—Ç–∞–ª–∫–∏–≤–∞–µ–º —Å—Ö–µ–º—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–π)
    const pushSuccess = await runCommand(
      'npx prisma db push --force-reset',
      '–ü—Ä–æ—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã Prisma –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'
    );

    if (!pushSuccess) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ push —Å—Ö–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...');

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä–æ—Å—Ç–æ push –±–µ–∑ force-reset
      const pushAltSuccess = await runCommand(
        'npx prisma db push',
        '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã Prisma'
      );

      if (!pushAltSuccess) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ç—è–≥–∏–≤–∞–Ω–∏–∏ —Å—Ö–µ–º—ã –≤ –ë–î');
      }
    }

    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const connectionOk = await checkDatabaseConnection();

    if (!connectionOk) {
      throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }

    // –®–∞–≥ 4: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –∑–∞–ø—É—Å–∫–∞–µ–º Prisma Studio –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log('');
    console.log('üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run db:studio - –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');

    console.log('=' * 60);
    console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Prisma –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç Prisma —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    console.log('‚úÖ –°—Ö–µ–º–∞ –ø—Ä–æ—Ç–æ–ª–∫–Ω—É—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ');
    console.log('');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:');
    console.log('- Backend: npm run start:dev');
    console.log('- Frontend: cd ../frontend && npm run dev');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Prisma:');
    console.error(error.message);
    console.log('');
    console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –∏ DIRECT_URL');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é:');
    console.log('   - npx prisma generate');
    console.log('   - npx prisma db push');

    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  main();
}

module.exports = { main };
