#!/usr/bin/env node

/**
 * üõ†Ô∏è –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ö–†–ò–ü–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó PRISMA
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ Prisma
 * –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase RPC —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
 *
 * –ü—Ä–µ–¥—Å—Ç–∞–≤—å —ç—Ç–æ –∫–∞–∫ "—á–µ—Ä–Ω—ã–π –≤—Ö–æ–¥" –≤ –∫–∞–∑–∏–Ω–æ –¥–ª—è IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤! üé∞
 */

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

/**
 * –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Prisma –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
const prisma = new PrismaClient();

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è "—Å—ã—Ä—ã—Ö" SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Prisma
 * @param {string} sql - SQL –∑–∞–ø—Ä–æ—Å
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @returns {Promise<boolean>} - –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function executePrismaSQL(sql, description) {
  try {
    console.log(`üîÑ ${description}...`);

    await prisma.$executeRawUnsafe(sql);

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${description}`);
    return true;

  } catch (error) {
    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    if (error.message.includes('already exists') ||
        error.message.includes('does not exist') ||
        error.message.includes('duplicate key')) {
      console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º): ${description} - ${error.message.substring(0, 100)}...`);
      return true;
    }

    console.error(`‚ùå –û—à–∏–±–∫–∞: ${description}`);
    console.error('–î–µ—Ç–∞–ª–∏:', error.message.substring(0, 200) + '...');
    return false;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma
 */
async function clearDatabaseViaPrisma() {
  console.log('üßπ –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma...');

  const tables = [
    'slot_mechanics',
    'slot_bonuses',
    'slot_features',
    'slots',
    'mechanics',
    'bonuses',
    'features',
    'themes',
    'slot_categories',
    'providers'
  ];

  // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
  await executePrismaSQL('SET foreign_key_checks = 0;', '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π');

  for (const table of tables) {
    await executePrismaSQL(`DROP TABLE IF EXISTS "${table}" CASCADE;`, `–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ${table}`);
  }

  // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
  await executePrismaSQL('SET foreign_key_checks = 1;', '–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π');

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ Prisma');
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Prisma push
 */
async function createTablesViaPrisma() {
  console.log('üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Prisma...');

  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);

    // –í—ã–ø–æ–ª–Ω—è–µ–º prisma db push –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('üìù –í—ã–ø–æ–ª–Ω—è–µ–º: npx prisma db push --force-reset');
    const { stdout, stderr } = await execAsync('npx prisma db push --force-reset', {
      cwd: __dirname,
      env: { ...process.env }
    });

    if (stdout) console.log('üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:', stdout);
    if (stderr && !stderr.includes('warn')) console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);

    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–∞');
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
    return false;
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞ –≤ –º–∞—Å—Å–∏–≤—ã
 */
function parseBackupData(backupPath) {
  console.log('üìñ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–µ–∫–∞–ø–∞...');

  const content = fs.readFileSync(backupPath, 'utf8');
  const lines = content.split('\n');

  const data = {
    providers: [],
    categories: [],
    themes: [],
    slots: []
  };

  let currentTable = null;

  for (const line of lines) {
    const trimmedLine = line.trim();

    if (trimmedLine.includes('DELETE FROM providers')) {
      currentTable = 'providers';
      continue;
    } else if (trimmedLine.includes('DELETE FROM slot_categories')) {
      currentTable = 'categories';
      continue;
    } else if (trimmedLine.includes('DELETE FROM themes')) {
      currentTable = 'themes';
      continue;
    } else if (trimmedLine.includes('DELETE FROM slots')) {
      currentTable = 'slots';
      continue;
    }

    if (trimmedLine.startsWith('INSERT INTO') && currentTable) {
      // –ü–∞—Ä—Å–∏–º INSERT statements
      const match = trimmedLine.match(/VALUES \((.*)\);?$/);
      if (match) {
        try {
          const values = match[1];
          data[currentTable].push(values);
        } catch (e) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É: ${trimmedLine.substring(0, 100)}...`);
        }
      }
    }
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:`);
  console.log(`   üè™ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${data.providers.length}`);
  console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${data.categories.length}`);
  console.log(`   üé® –¢–µ–º: ${data.themes.length}`);
  console.log(`   üé∞ –°–ª–æ—Ç–æ–≤: ${data.slots.length}`);

  return data;
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
async function insertProviders(providersData) {
  console.log('üè™ –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');

  let successCount = 0;

  for (const [index, providerValues] of providersData.entries()) {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Prisma raw query
      const sql = `INSERT INTO providers (id, name, slug, logo_url, website_url, country, founded_year, description, is_active, is_recommended, created_at, updated_at) VALUES (${providerValues})`;

      await prisma.$executeRawUnsafe(sql);
      successCount++;

      if ((index + 1) % 10 === 0) {
        console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${index + 1}/${providersData.length}`);
      }

    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${index + 1}: ${error.message.substring(0, 100)}...`);
    }
  }

  console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${successCount}/${providersData.length}`);
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
async function insertCategories(categoriesData) {
  console.log('üìÅ –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');

  let successCount = 0;

  for (const [index, categoryValues] of categoriesData.entries()) {
    try {
      const sql = `INSERT INTO slot_categories (id, name, slug, description, created_at, updated_at) VALUES (${categoryValues})`;

      await prisma.$executeRawUnsafe(sql);
      successCount++;

    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${index + 1}: ${error.message.substring(0, 100)}...`);
    }
  }

  console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${successCount}/${categoriesData.length}`);
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–º
 */
async function insertThemes(themesData) {
  console.log('üé® –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–º—ã...');

  let successCount = 0;

  for (const [index, themeValues] of themesData.entries()) {
    try {
      const sql = `INSERT INTO themes (id, name, slug, description, created_at, updated_at) VALUES (${themeValues})`;

      await prisma.$executeRawUnsafe(sql);
      successCount++;

      if ((index + 1) % 20 === 0) {
        console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–º: ${index + 1}/${themesData.length}`);
      }

    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–º—ã ${index + 1}: ${error.message.substring(0, 100)}...`);
    }
  }

  console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–º: ${successCount}/${themesData.length}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
async function verifyData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');

  try {
    const providersCount = await prisma.providers.count();
    const categoriesCount = await prisma.slot_categories.count();
    const themesCount = await prisma.themes.count();

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(`   üè™ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${providersCount}`);
    console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesCount}`);
    console.log(`   üé® –¢–µ–º: ${themesCount}`);

    return { providersCount, categoriesCount, themesCount };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
    return null;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const startTime = Date.now();

  try {
    console.log('üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ß–ï–†–ï–ó PRISMA!');
    console.log('=' * 60);

    // –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    const structureCreated = await createTablesViaPrisma();
    if (!structureCreated) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü');
    }

    // –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞
    const backupPath = path.join(__dirname, '../backups/db/database_backup_v002.sql');
    if (!fs.existsSync(backupPath)) {
      throw new Error(`–§–∞–π–ª –±–µ–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupPath}`);
    }

    const data = parseBackupData(backupPath);

    // –®–∞–≥ 4: –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await insertProviders(data.providers);
    await insertCategories(data.categories);
    await insertThemes(data.themes);

    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const result = await verifyData();

    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);

    console.log('=' * 60);
    console.log('üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ß–ï–†–ï–ó PRISMA –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);

    if (result && (result.providersCount > 50 && result.categoriesCount > 10 && result.themesCount > 100)) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
      console.log('');
      console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. npx prisma generate - –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Prisma');
      console.log('2. npm run start:dev - –∑–∞–ø—É—Å—Ç–∏—Ç—å backend');
      console.log('3. npm run db:studio - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } else {
      console.log('‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è');
    }

  } catch (error) {
    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);

    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:');
    console.error(error.message);
    console.error(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${duration} —Å–µ–∫—É–Ω–¥`);

    process.exit(1);

  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { main };
