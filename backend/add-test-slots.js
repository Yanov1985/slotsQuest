const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const testSlots = [
  {
    name: 'Rich Wilde and the Book of Dead',
    slug: 'rich-wilde-book-of-dead',
    description: '–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π —Å–ª–æ—Ç —Å –µ–≥–∏–ø–µ—Ç—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π',
    rtp: 96.21,
    volatility: 'high',
    min_bet: 0.10,
    max_bet: 100.00,
    max_win: 5000.00,
    reels: 5,
    rows: 3,
    theme: '–ï–≥–∏–ø–µ—Ç',
    features: ['Free Spins', 'Expanding Symbols'],
    is_mobile_compatible: true,
    is_demo_available: true
  },
  {
    name: 'Gonzo\'s Quest',
    slug: 'gonzos-quest',
    description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–ª–æ—Ç —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º–∏ –±–∞—Ä–∞–±–∞–Ω–∞–º–∏',
    rtp: 95.97,
    volatility: 'medium',
    min_bet: 0.20,
    max_bet: 50.00,
    max_win: 2500.00,
    reels: 5,
    rows: 3,
    theme: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
    features: ['Avalanche', 'Multipliers'],
    is_mobile_compatible: true,
    is_demo_available: true
  },
  {
    name: 'Immortal Romance',
    slug: 'immortal-romance',
    description: '–í–∞–º–ø–∏—Ä—Å–∫–∏–π —Å–ª–æ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –±–æ–Ω—É—Å–æ–≤',
    rtp: 96.86,
    volatility: 'medium',
    min_bet: 0.30,
    max_bet: 60.00,
    max_win: 3600.00,
    reels: 5,
    rows: 3,
    theme: '–í–∞–º–ø–∏—Ä—ã',
    features: ['Free Spins', 'Wild Transform'],
    is_mobile_compatible: true,
    is_demo_available: true
  },
  {
    name: 'The Dog House',
    slug: 'the-dog-house',
    description: '–í–µ—Å–µ–ª—ã–π —Å–ª–æ—Ç —Å —Å–æ–±–∞—á—å–µ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π',
    rtp: 96.51,
    volatility: 'high',
    min_bet: 0.20,
    max_bet: 125.00,
    max_win: 6750.00,
    reels: 5,
    rows: 3,
    theme: '–ñ–∏–≤–æ—Ç–Ω—ã–µ',
    features: ['Free Spins', 'Sticky Wilds'],
    is_mobile_compatible: true,
    is_demo_available: true
  },
  {
    name: 'Book of Ra Deluxe',
    slug: 'book-of-ra-deluxe',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –µ–≥–∏–ø–µ—Ç—Å–∫–∏–π —Å–ª–æ—Ç',
    rtp: 95.10,
    volatility: 'high',
    min_bet: 0.04,
    max_bet: 90.00,
    max_win: 5000.00,
    reels: 5,
    rows: 3,
    theme: '–ï–≥–∏–ø–µ—Ç',
    features: ['Free Spins', 'Expanding Symbols'],
    is_mobile_compatible: true,
    is_demo_available: true
  }
];

async function addTestSlots() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏
    const firstProvider = await prisma.providers.findFirst({
      where: { is_active: true }
    });
    
    if (!firstProvider) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const testProvider = await prisma.providers.create({
        data: {
          name: 'Test Provider',
          slug: 'test-provider',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–ª–æ—Ç–æ–≤',
          is_active: true
        }
      });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${testProvider.name}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      var providerId = testProvider.id;
    } else {
      console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${firstProvider.name}`);
      var providerId = firstProvider.id;
    }
    
    let addedCount = 0;
    let skippedCount = 0;
    
    for (const slotData of testSlots) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ—Ç —Å —Ç–∞–∫–∏–º slug
        const existingSlot = await prisma.slots.findUnique({
          where: { slug: slotData.slug }
        });
        
        if (existingSlot) {
          console.log(`‚ö†Ô∏è  –°–ª–æ—Ç \"${slotData.name}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é...`);
          skippedCount++;
          continue;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const newSlot = await prisma.slots.create({
          data: {
            ...slotData,
            provider_id: providerId,
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞—é—Ç—Å—è null –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          }
        });
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–ª–æ—Ç: ${newSlot.name}`);
        addedCount++;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ \"${slotData.name}\":`, error.message);
        skippedCount++;
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount} —Å–ª–æ—Ç–æ–≤`);
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Å–ª–æ—Ç–æ–≤`);
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ!');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestSlots();