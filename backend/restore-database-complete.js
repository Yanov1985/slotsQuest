#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SlotQuest
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
 * 1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Supabase —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª–∏
 * 2. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL
 * 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–µ–∫–∞–ø–∞
 * 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É Prisma
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node restore-database-complete.js
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Supabase
 * @param {string} sql - SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
async function executeSql(sql, description) {
  try {
    console.log(`üîÑ ${description}...`);

    const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql });

    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
      return false;
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${description}`);
    return true;
  } catch (err) {
    console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`);
    console.error('–î–µ—Ç–∞–ª–∏:', err);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SQL —Ñ—É–Ω–∫—Ü–∏–∏ exec_sql –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ RPC
 */
async function createExecSqlFunction() {
  const createFunctionSql = `
    CREATE OR REPLACE FUNCTION exec_sql(sql_query text)
    RETURNS text
    LANGUAGE plpgsql
    SECURITY DEFINER
    AS $$
    BEGIN
      EXECUTE sql_query;
      RETURN 'OK';
    EXCEPTION
      WHEN OTHERS THEN
        RETURN SQLERRM;
    END;
    $$;
  `;

  return await executeSql(createFunctionSql, '–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ exec_sql');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL
 * uuid-ossp —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID
 */
async function installExtensions() {
  const extensions = [
    'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";',
    'CREATE EXTENSION IF NOT EXISTS "pgcrypto";'
  ];

  for (const ext of extensions) {
    const success = await executeSql(ext, `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${ext}`);
    if (!success) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...`);
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã
 */
async function clearDatabase() {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞—è –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
  const dropTablesQueries = [
    'DROP TABLE IF EXISTS slot_mechanics CASCADE;',
    'DROP TABLE IF EXISTS slot_bonuses CASCADE;',
    'DROP TABLE IF EXISTS slot_features CASCADE;',
    'DROP TABLE IF EXISTS slots CASCADE;',
    'DROP TABLE IF EXISTS mechanics CASCADE;',
    'DROP TABLE IF EXISTS bonuses CASCADE;',
    'DROP TABLE IF EXISTS features CASCADE;',
    'DROP TABLE IF EXISTS themes CASCADE;',
    'DROP TABLE IF EXISTS slot_categories CASCADE;',
    'DROP TABLE IF EXISTS providers CASCADE;',

    // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã Prisma
    'DROP TABLE IF EXISTS _prisma_migrations CASCADE;',

    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    'DROP SEQUENCE IF EXISTS features_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS bonuses_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS mechanics_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS slot_features_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS slot_bonuses_id_seq CASCADE;',
    'DROP SEQUENCE IF EXISTS slot_mechanics_id_seq CASCADE;'
  ];

  for (const query of dropTablesQueries) {
    await executeSql(query, `–£–¥–∞–ª–µ–Ω–∏–µ: ${query}`);
  }

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SQL —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–µ–∫–∞–ø–∞
 * @returns {string[]} - –ú–∞—Å—Å–∏–≤ SQL –∫–æ–º–∞–Ω–¥
 */
function readBackupFile(filePath) {
  try {
    console.log(`üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–µ–∫–∞–ø–∞: ${filePath}`);

    const content = fs.readFileSync(filePath, 'utf8');

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('--')) // –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      .join('\n')
      .split(';')
      .filter(cmd => cmd.trim());

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥ –≤ –±–µ–∫–∞–ø–µ`);
    return commands;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞:', error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞
 * @param {string} backupPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–µ–∫–∞–ø–∞
 */
async function restoreFromBackup(backupPath) {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞...');

  const commands = readBackupFile(backupPath);
  let successCount = 0;
  let errorCount = 0;

  for (let i = 0; i < commands.length; i++) {
    const command = commands[i].trim();
    if (!command) continue;

    const progress = `(${i + 1}/${commands.length})`;
    const success = await executeSql(command, `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${progress}`);

    if (success) {
      successCount++;
    } else {
      errorCount++;
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${progress}: ${command.substring(0, 50)}...`);
    }
  }

  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${successCount} —É—Å–ø–µ—à–Ω—ã—Ö, ${errorCount} –æ—à–∏–±–æ–∫`);

  if (errorCount > successCount) {
    throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 */
async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SlotQuest');
    console.log('=' * 60);

    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await createExecSqlFunction();

    // –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    await installExtensions();

    // –®–∞–≥ 3: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await clearDatabase();

    // –®–∞–≥ 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–µ–∫–∞–ø–∞
    const backupPath = path.join(__dirname, '../backups/db/database_backup_v002.sql');
    await restoreFromBackup(backupPath);

    console.log('=' * 60);
    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run prisma:db:push - –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã Prisma');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run prisma:generate - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Prisma');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('');
    console.log('üí° –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.error(error);
    console.log('');
    console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª–∏ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞');

    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  main();
}

module.exports = { main };
