#!/usr/bin/env node

/**
 * üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –ß–ï–†–ï–ó SUPABASE API
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Supabase REST API,
 * –æ–±—Ö–æ–¥—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —á–µ—Ä–µ–∑ Supabase Edge Functions –∏–ª–∏ RPC
 */
async function executeSQL(sql, description) {
  try {
    console.log(`üîÑ ${description}...`);

    // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —á–µ—Ä–µ–∑ rpc
    const { data, error } = await supabase.rpc('exec_sql', {
      sql_query: sql
    });

    if (error) {
      console.log(`‚ö†Ô∏è RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
      return await executeViaInsert(sql, description);
    }

    console.log(`‚úÖ ${description} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    return true;

  } catch (err) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${err.message}`);
    return false;
  }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ INSERT –∑–∞–ø—Ä–æ—Å—ã
 */
async function executeViaInsert(sql, description) {
  // –ï—Å–ª–∏ —ç—Ç–æ CREATE TABLE, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ schema
  if (sql.includes('CREATE TABLE')) {
    console.log(`üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...`);
    return true;
  }
  return false;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
 */
async function createTables() {
  console.log('üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...');

  const tables = [
    {
      name: 'providers',
      sql: `
        CREATE TABLE IF NOT EXISTS providers (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          name VARCHAR(255) UNIQUE NOT NULL,
          slug VARCHAR(255) UNIQUE NOT NULL,
          description TEXT,
          logo_url VARCHAR(500),
          website_url VARCHAR(500),
          founded_year INTEGER,
          country VARCHAR(100),
          is_active BOOLEAN DEFAULT true,
          is_recommended BOOLEAN DEFAULT false,
          created_at TIMESTAMPTZ DEFAULT now(),
          updated_at TIMESTAMPTZ DEFAULT now()
        );
      `
    },
    {
      name: 'slot_categories',
      sql: `
        CREATE TABLE IF NOT EXISTS slot_categories (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          name VARCHAR(255) UNIQUE NOT NULL,
          slug VARCHAR(255) UNIQUE NOT NULL,
          description TEXT,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMPTZ DEFAULT now(),
          updated_at TIMESTAMPTZ DEFAULT now()
        );
      `
    },
    {
      name: 'themes',
      sql: `
        CREATE TABLE IF NOT EXISTS themes (
          id TEXT PRIMARY KEY,
          name TEXT UNIQUE NOT NULL,
          slug TEXT UNIQUE NOT NULL,
          description TEXT,
          color TEXT,
          icon TEXT,
          is_featured BOOLEAN DEFAULT false,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMPTZ DEFAULT now(),
          updated_at TIMESTAMPTZ DEFAULT now()
        );
      `
    }
  ];

  for (const table of tables) {
    await executeSQL(table.sql, `–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ${table.name}`);
  }
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ INSERT
 */
async function insertDataDirectly() {
  console.log('üì¶ –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç...');

  // –ü—Ä–∏–º–µ—Ä –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  const providers = [
    {
      name: '100HP Gaming',
      slug: '100hp-gaming',
      is_active: true,
      is_recommended: false
    },
    {
      name: 'NetEnt',
      slug: 'netent',
      is_active: true,
      is_recommended: true
    },
    {
      name: 'Pragmatic Play',
      slug: 'pragmatic-play',
      is_active: true,
      is_recommended: true
    }
  ];

  try {
    const { data, error } = await supabase
      .from('providers')
      .insert(providers)
      .select();

    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${error.message}`);
      return false;
    }

    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${data?.length || 0} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤`);
    return true;

  } catch (err) {
    console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
 */
async function checkTables() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');

  const tables = ['providers', 'slot_categories', 'themes'];

  for (const tableName of tables) {
    try {
      const { data, error } = await supabase
        .from(tableName)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${error.message}`);
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    } catch (err) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    console.log('üöÄ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó SUPABASE API');
    console.log('=' * 50);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await checkTables();

    console.log('');
    console.log('üèóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
    await createTables();

    console.log('');
    console.log('üì¶ –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await insertDataDirectly();

    console.log('');
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    await checkTables();

    console.log('');
    console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã - –∑–∞–≥—Ä—É–∂–∞–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–µ–∫–∞–ø–∞');
    console.log('2. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: npx prisma db pull');
    console.log('3. –ó–∞—Ç–µ–º: npx prisma generate');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { main };
