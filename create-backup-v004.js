const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
const now = new Date();
const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS

const backupDir = path.join(__dirname, 'backups', 'db');
const backupFile = path.join(backupDir, `database_backup_v004_${dateStr}_${timeStr}.sql`);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–µ–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(backupDir)) {
  fs.mkdirSync(backupDir, { recursive: true });
}

console.log(`–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö v004...`);
console.log(`–§–∞–π–ª: ${backupFile}`);

try {
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–µ–∫–µ–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ .env
  const backendDir = path.join(__dirname, 'backend');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (!fs.existsSync(backendDir)) {
    throw new Error('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DATABASE_URL
  const envPath = path.join(backendDir, '.env');
  if (!fs.existsSync(envPath)) {
    throw new Error('.env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend');
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const databaseUrlMatch = envContent.match(/DATABASE_URL\s*=\s*"([^"]+)"/);
  
  if (!databaseUrlMatch) {
    throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  }
  
  const databaseUrl = databaseUrlMatch[1];
  console.log('–ù–∞–π–¥–µ–Ω DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
  
  // –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const url = new URL(databaseUrl);
  const host = url.hostname;
  const port = url.port || '5432';
  const database = url.pathname.slice(1); // —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à
  const username = url.username;
  const password = url.password;
  
  console.log(`–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${host}:${port}/${database}`);
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É pg_dump
  const pgDumpCommand = `pg_dump --host=${host} --port=${port} --username=${username} --dbname=${database} --no-password --verbose --clean --no-owner --no-privileges --format=plain --file="${backupFile}"`;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª—è
  const env = { ...process.env, PGPASSWORD: password };
  
  console.log('–í—ã–ø–æ–ª–Ω—è—é pg_dump...');
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
  execSync(pgDumpCommand, { 
    env: env,
    stdio: 'inherit',
    cwd: backendDir
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
  if (fs.existsSync(backupFile)) {
    const stats = fs.statSync(backupFile);
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
    console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(2)} KB`);
    console.log(`üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${now.toLocaleString('ru-RU')}`);
  } else {
    throw new Error('–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
  
  // –ï—Å–ª–∏ pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
  if (error.message.includes('pg_dump') || error.message.includes('not found')) {
    console.log('\nüîÑ pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Node.js...');
    
    (async () => {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π SQL –¥–∞–º–ø —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const { Client } = require('./backend/node_modules/pg');
        
        // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
        const backendDir = path.join(__dirname, 'backend');
        const envPath = path.join(backendDir, '.env');
        const envContent = fs.readFileSync(envPath, 'utf8');
        const databaseUrlMatch = envContent.match(/DATABASE_URL\s*=\s*"([^"]+)"/);
        
        if (!databaseUrlMatch) {
          throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
        }
        
        const client = new Client({
          connectionString: databaseUrlMatch[1]
        });
        
        await client.connect();
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ pg –∫–ª–∏–µ–Ω—Ç');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        const tablesResult = await client.query(`
          SELECT tablename 
          FROM pg_tables 
          WHERE schemaname = 'public'
          ORDER BY tablename
        `);
        
        let sqlDump = `-- –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SlotQuest v004\n`;
        sqlDump += `-- –°–æ–∑–¥–∞–Ω–æ: ${now.toISOString()}\n\n`;
        sqlDump += `SET foreign_key_checks = 0;\n\n`;
        
        // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–µ–º –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö
        for (const table of tablesResult.rows) {
          const tableName = table.tablename;
          console.log(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
          const dataResult = await client.query(`SELECT * FROM "${tableName}"`);
          
          if (dataResult.rows.length > 0) {
            sqlDump += `-- –¢–∞–±–ª–∏—Ü–∞: ${tableName}\n`;
            sqlDump += `DELETE FROM "${tableName}";\n`;
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
            const columnsResult = await client.query(`
              SELECT column_name, data_type 
              FROM information_schema.columns 
              WHERE table_name = $1 AND table_schema = 'public'
              ORDER BY ordinal_position
            `, [tableName]);
            
            const columns = columnsResult.rows.map(col => col.column_name);
            
            for (const row of dataResult.rows) {
              const values = columns.map(col => {
                const value = row[col];
                if (value === null) return 'NULL';
                if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
                if (value instanceof Date) return `'${value.toISOString()}'`;
                if (typeof value === 'boolean') return value ? 'true' : 'false';
                return value;
              });
              
              sqlDump += `INSERT INTO "${tableName}" (${columns.map(col => `"${col}"`).join(', ')}) VALUES (${values.join(', ')});\n`;
            }
            
            sqlDump += '\n';
          }
        }
        
        sqlDump += `SET foreign_key_checks = 1;\n`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(backupFile, sqlDump);
        
        await client.end();
        
        const stats = fs.statSync(backupFile);
        console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Node.js: ${backupFile}`);
        console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(2)} KB`);
        console.log(`üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${now.toLocaleString('ru-RU')}`);
        
      } catch (nodeError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —á–µ—Ä–µ–∑ Node.js:', nodeError.message);
        process.exit(1);
      }
    })();
  } else {
    process.exit(1);
  }
}